#!/usr/bin/env bash

set -eu
set -o pipefail

if [[ "${NGROK_AUTOLOAD_CONFIG_DEBUG:-false}" == "true" ]]; then
  set -x
fi

temp_dir="$(mktemp -d)"

cleanup() {
  if [[ -d "$temp_dir" ]]; then
    rm -fr "$temp_dir"
  fi
}

trap cleanup EXIT HUP INT QUIT TERM USR1 USR2

_NGROK_CONFIG_OPTIONS=()

err() {
  echo "$*" >&2
}

die() {
  local line=

  for line in "$@"; do
    err "$line"
  done

  exit 1
}

reverse() {
  if type tac >/dev/null 2>&1; then
    cat - | tac
  else
    cat - | tail -r
  fi
}

ngrok::config_version() {
  command ngrok --version | awk '$0=$3' | awk -F. '$0=$1'
}

get_my_path() {
  local src="${BASH_SOURCE[0]}" temp_dir=''
  while [[ -h "$src" ]]; do
    temp_dir="$(cd -P "$(dirname "$src")" && pwd)"
    src="$(readlink "$src")"

    if [[ ! "$src" =~ ^/.* ]]; then
      src="$temp_dir/$src"
    fi
  done
  cd -P "$(dirname "$src")" && pwd
}

global_config_dir() {
  if [[ "$(ngrok::config_version)" == "3" ]]; then
    case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
      darwin)
        echo "$HOME/Library/Application Support/ngrok"
        ;;
      linux*)
        echo "$HOME/.config/ngrok"
        ;;
      *)
        die "$(uname -a) is not supported"
        ;;
    esac
  else
    echo "$HOME/.ngrok2"
  fi
}

ancestors() {
  local dir=''

  dir="$(pwd)"

  while true; do
    if [[ "$dir" == "$HOME" ]] || [[ "$dir" == "/" ]]; then
      break
    fi

    echo "$dir"
    dir="$(cd "$dir" && cd ../ && pwd)"
  done

  if [[ "${USE_GLOBAL_CONFIG:=true}" != "false" ]]; then
    global_config_dir
  fi
}

build_config_options() {
  local location='' config_path=''

  ancestors | reverse > "$temp_dir/config_dir.txt"

  while read -r location; do
    config_path="${location}/ngrok.yml"

    if [[ -f "$config_path" ]]; then
      _NGROK_CONFIG_OPTIONS+=(--config "$config_path")
    fi
  done < "$temp_dir/config_dir.txt"
}

should_load_configs() {
  local -r subcommand="$1"

  case "$subcommand" in
    authtoken|credits|update|version|help|-h)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

exec_ngrok_with_configurations() {
  local -r subcommand="$1"
  shift 1

  build_config_options

  if (("${#_NGROK_CONFIG_OPTIONS[*]} > 0")); then
    exec ngrok "$subcommand" "${_NGROK_CONFIG_OPTIONS[@]}" "$@"
  else
    exec ngrok "$subcommand" "$@"
  fi
}

exec_ngrok_with_default() {
  local -r subcommand="$1"
  shift 1
  exec ngrok "$subcommand" "$@"
}

is_original_subcommand() {
  declare -F "subcommand::$1" >/dev/null 2>&1
}

subcommand::configs() {
  build_config_options
  echo "${_NGROK_CONFIG_OPTIONS[@]}"
}

subcommand::update-autoload() {
  if ! type git >/dev/null 2>&1; then
    die "update-autoload cannot be run unless git exists"
  fi

  cd "$(get_my_path)"

  if [[ ! -d ".git" ]]; then
    die "update-autoload can be run only when installed through git clone"
  fi

  git fetch origin release
  git merge --ff origin/release
  echo "Completed update-autoload successfully."
}

if ! type "ngrok" >/dev/null 2>&1; then
  die "ngrok is not found" "please follow https://dashboard.ngrok.com/get-started to install"
fi

SUBCOMMAND="${1:-help}"

if (($# > 0)); then
  shift 1
fi

if is_original_subcommand "$SUBCOMMAND"; then
  "subcommand::$SUBCOMMAND" "$@"
else
  if [[ "${IGNORE_CONFIG:=false}" != "true" ]] && should_load_configs "$SUBCOMMAND"; then
    build_config_options
  fi

  if (("${#_NGROK_CONFIG_OPTIONS[*]} > 0")); then
    exec ngrok "$SUBCOMMAND" "${_NGROK_CONFIG_OPTIONS[@]}" "$@"
  else
    exec ngrok "$SUBCOMMAND" "$@"
  fi
fi
